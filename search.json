[
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html",
    "href": "posts/python_basic/danl_210_python_basic.html",
    "title": "Basic Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!\n\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html#what-is-python",
    "href": "posts/python_basic/danl_210_python_basic.html#what-is-python",
    "title": "Basic Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html#variables-and-data-types",
    "href": "posts/python_basic/danl_210_python_basic.html#variables-and-data-types",
    "title": "Basic Python",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html#control-structures",
    "href": "posts/python_basic/danl_210_python_basic.html#control-structures",
    "title": "Basic Python",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html#functions",
    "href": "posts/python_basic/danl_210_python_basic.html#functions",
    "title": "Basic Python",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/python_basic/danl_210_python_basic.html#lists-and-dictionaries",
    "href": "posts/python_basic/danl_210_python_basic.html#lists-and-dictionaries",
    "title": "Basic Python",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/christmas/danl_210_hw3_Allen_Levi_Blog.html",
    "href": "posts/christmas/danl_210_hw3_Allen_Levi_Blog.html",
    "title": "Levi Allen",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\ndf_1 = holiday_movies\n\n\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\ndf_2 = holiday_movie_genres\n\n\n# counting\nholiday_movies['title_type'].value_counts()\n\n\n\n\n\n\n\n\ncount\n\n\ntitle_type\n\n\n\n\n\ntvMovie\n1206\n\n\nmovie\n800\n\n\nvideo\n259\n\n\n\n\ndtype: int64\n\n\n\n# filtering\nholiday_movies_only_1 = holiday_movies[\"title_type\"] == \"movie\"\nholiday_movies_only = holiday_movies[ holiday_movies_only_1]\n\n\n# filtering\ngood_holiday_movies_only = holiday_movies_only[\"average_rating\"] &gt; 7.5\ngood_holiday_movies_only = holiday_movies_only[ good_holiday_movies_only ]\n\n\n# filtering\ngood_holiday_movies_only_1 = good_holiday_movies_only[\"num_votes\"] &gt; 100\ngood_holiday_movies_only_1 = good_holiday_movies_only[ good_holiday_movies_only_1 ]\n\n\n# sorting\ngood_holiday_movies_only_1.sort_values([\"average_rating\"], ascending = False)\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n2240\ntt9351856\nmovie\nHoliday Twist\nholiday twist\n2023\n95.0\n9.0\n720\n\n\n1259\ntt16274720\nmovie\nSave Christmas\nsave christmas\n2022\n90.0\n8.9\n260\n\n\n45\ntt0044008\nmovie\nA Christmas Carol\na christmas carol\n1951\n86.0\n8.1\n24671\n\n\n909\ntt13046014\nmovie\nThe Fright Before Christmas\nthe fright before christmas\n2020\nNaN\n8.0\n144\n\n\n48\ntt0046250\nmovie\nRoman Holiday\nroman holiday\n1953\n118.0\n8.0\n145289\n\n\n576\ntt0856282\nmovie\nInspector Tahar's Holiday\ninspector tahars holiday\n1972\n110.0\n8.0\n159\n\n\n2170\ntt8850510\nmovie\nOh Deer: It's Christmas\noh deer its christmas\n2018\n75.0\n8.0\n102\n\n\n269\ntt0233828\nmovie\nThe Long Holiday\nthe long holiday\n2000\n145.0\n7.9\n116\n\n\n151\ntt0107688\nmovie\nThe Nightmare Before Christmas\nthe nightmare before christmas\n1993\n76.0\n7.9\n367288\n\n\n107\ntt0085334\nmovie\nA Christmas Story\na christmas story\n1983\n93.0\n7.9\n163273\n\n\n1219\ntt15772866\nmovie\nChristmas with the Chosen: The Messengers\nchristmas with the chosen the messengers\n2021\n123.0\n7.8\n881\n\n\n19\ntt0030241\nmovie\nHoliday\nholiday\n1938\n95.0\n7.7\n17619\n\n\n149\ntt0104940\nmovie\nThe Muppet Christmas Carol\nthe muppet christmas carol\n1992\n85.0\n7.7\n66015\n\n\n1479\ntt22176928\nmovie\nUninvited for the Holidays\nuninvited for the holidays\n2022\n72.0\n7.7\n421\n\n\n198\ntt0140825\nmovie\nChristmas in August\nchristmas in august\n1998\n97.0\n7.6\n3855\n\n\n50\ntt0047673\nmovie\nWhite Christmas\nwhite christmas\n1954\n120.0\n7.6\n47688\n\n\n957\ntt13327258\nmovie\nThe Jinkx and DeLa Holiday Special\nthe jinkx and dela holiday special\n2020\n65.0\n7.6\n540\n\n\n2124\ntt8232648\nmovie\nA Christmas Carol\na christmas carol\n2018\n81.0\n7.6\n150\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# joining\nconcat = pd.concat([df_1, df_2], axis=1)\nconcat = concat.dropna()\nconcat = concat.drop_duplicates()"
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "finalproject.html",
    "href": "finalproject.html",
    "title": "Final Project",
    "section": "",
    "text": "Do Companies Lose Money When They Turn Green?\n\nIntroduction\n\nBackground\nESG Environmental scores are a method to measure how sustainable certain company’s environmental practices are. In an era where climate change is a pressing issue, private companies doing their part in helping maintain our planet’s stability is a necessity. However, companies also need to make money to continue their business and keep their employees’ jobs. Stocks allow us to see how well a company is performing on the profit and business side of things. I want to understand what the correlation is between ESG scores and stock performance.\n\n\nThe Problem\nMany people see caring about the environment as giving up on profits and successful business practices. Are these valid concerns? Potentially. Companies that donate their money to environmental causes or invest in more expensive, cleaner energy may be increasing their costs to do so. But this does not have to be the case. Only the numbers will tell. The research questions are therefore the following: Are ESG scores and stock performance correlated? And what does this entail for businesses?\n\n\n\nData Collection\nUsing Python selenium, the data for ESG scores and stock market data was scraped from Yahoo! Finance.\n\n\nDescriptive Statistics\n\n\nExploratory Data Analysis\nI will be running a linear regression with closing stock price as the dependent variable, and environmental, social, governance, and controversy levels as the independent variables. The main question I hope to answer is if environmental scores are statistically significant in this model, but I am also curious to see if the other specific scores are significant as well.\nAfter running the regression, the environmental score was the only independent variable found to be statistically significant, with a p-value of less than 0.05. The coefficient was negative, indicating that higher ESG scores are correlated with lower stock market prices, and lower ESG scores are correlated with higher stock market prices. The adjusted r-squared, however, was quite low, at 0.002, but this is due to ESG scores being one of many factors that contribute to stock market prices.\n\n\nProject Significance\nWith the Environmental component of ESG scores being negatively correlated with stock prices, this indicates that companies who lower their scores, which means being more sustainable, may see a rise in their stock prices. This also indicates that the common assumption that being more environmentally friendly will cost companies their profits. In fact, on the contrary. More successful companies tend to be greener.\n\n\nReferences"
  },
  {
    "objectID": "christmas.html",
    "href": "christmas.html",
    "title": "Christmas Movies",
    "section": "",
    "text": "Christmas movies have been a family staple and holiday tradition for many over the past few decades. Looking at the dataset provided, there were over 2000 observations, but only 800 were classified as ‘movies’. I cut those non-movie observations out to just look at the movies.\nThe movie with the highest rating was called ‘Holiday Twist’ with a rating of 9 flat. The movie with the most number of votes, however, was ‘Nightmare Before Christmas’, which still had a solid rating of 7.9.\nAlthough the general public may not have agreed with me, I still believe ‘Elf’ and ‘Christmas Vacation’ are the best Christmas movies.\nSo have fun everyone, enjoy April, and only about 8 months until these Christmas movies start up again!\nLevi"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Levi’s Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChristmas Movies\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\nLevi Allen\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify Blog\n\n\n\n\n\n\n\n\nMar 6, 2025\n\n\nLevi Allen\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Python\n\n\n\n\n\n\n\n\nMar 6, 2025\n\n\nLevi Allen\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Levi Allen",
    "section": "",
    "text": "I’m an Economics major passionate about my degree and all things business and data related. I’m an also an avid coffee drinker and sports fan (GO BEARS!)."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Levi Allen",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Economics | Aug 2023 - May 2026  Minor in College Honors Program"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Levi Allen",
    "section": "Experience",
    "text": "Experience\nThe Lakehouse Canandaigua | Activities Ambassador | June 2024 - Aug 2024"
  },
  {
    "objectID": "posts/christmas/christmas.html",
    "href": "posts/christmas/christmas.html",
    "title": "Christmas Movies",
    "section": "",
    "text": "Christmas movies have been a family staple and holiday tradition for many over the past few decades. Looking at the dataset provided, there were over 2000 observations, but only 800 were classified as ‘movies’. I cut those non-movie observations out to just look at the movies.\nThe movie with the highest rating was called ‘Holiday Twist’ with a rating of 9 flat. The movie with the most number of votes, however, was ‘Nightmare Before Christmas’, which still had a solid rating of 7.9.\nAlthough the general public may not have agreed with me, I still believe ‘Elf’ and ‘Christmas Vacation’ are the best Christmas movies."
  },
  {
    "objectID": "posts/christmas/christmas.html#so-have-fun-everyone-enjoy-april-and-only-about-8-months-until-these-christmas-movies-start-up-again",
    "href": "posts/christmas/christmas.html#so-have-fun-everyone-enjoy-april-and-only-about-8-months-until-these-christmas-movies-start-up-again",
    "title": "Christmas Movies",
    "section": "So have fun everyone, enjoy April, and only about 8 months until these Christmas movies start up again!",
    "text": "So have fun everyone, enjoy April, and only about 8 months until these Christmas movies start up again!"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/spotify/Spotify_Blog.html",
    "href": "posts/spotify/Spotify_Blog.html",
    "title": "Spotify Blog",
    "section": "",
    "text": "import pandas as pd\n\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nThrowbacks = spotify[\"playlist_name\"] == \"Throwbacks\"\ndata = spotify[Throwbacks]\ndata.drop_duplicates(subset = [\"track_name\"])\n\nUsher = data[\"artist_name\"] == \"Usher\"\ndata[Usher]\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n5\n0\nThrowbacks\n5\nUsher\nYeah!\n250373\nConfessions\n\n\n6\n0\nThrowbacks\n6\nUsher\nMy Boo\n223440\nConfessions\n\n\n24300\n380\nThrowbacks\n85\nUsher\nDJ Got Us Fallin' In Love\n220800\nRaymond v Raymond (Deluxe Edition)\n\n\n24316\n380\nThrowbacks\n101\nUsher\nYeah!\n250373\nConfessions\n\n\n24343\n380\nThrowbacks\n128\nUsher\nI Don't Mind\n251989\nI Don't Mind\n\n\n48233\n717\nThrowbacks\n23\nUsher\nOMG\n269493\nRaymond v Raymond\n\n\n186696\n999823\nThrowbacks\n2\nUsher\nOMG\n269493\nRaymond v Raymond\n\n\n186700\n999823\nThrowbacks\n6\nUsher\nDJ Got Us Fallin' In Love\n220800\nRaymond v Raymond (Deluxe Edition)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]